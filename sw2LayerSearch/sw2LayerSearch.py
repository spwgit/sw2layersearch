# -*- coding: utf-8 -*-
"""
/***************************************************************************
 sw2LayerSearch
                                 A QGIS plugin
 General purpose layer search tool - exports attributes to csv file
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-08-07
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Simon Warren - SW2 ICT
        email                : simon.warren@wychavon.gov.uk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from qgis.core import *
from qgis.gui import *
from qgis.utils import *
# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .sw2LayerSearch_dockwidget import sw2LayerSearchDockWidget
import os
import subprocess as sp
from .freeHandQryTool import FreehandPolygonMaptool


class sw2LayerSearch:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'sw2LayerSearch_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)
                
        self.freeHandTool = FreehandPolygonMaptool(self.iface.mapCanvas())

    
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('sw2LayerSearch', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        # Create the dialog (after translation) and keep reference
        self.dlg = sw2LayerSearchDialog()

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        # Create a new toolbar
        self.tool_bar = self.iface.addToolBar('SW2 Layer Search')
        self.tool_bar.setObjectName('sw2_layer_search')
        
        self.search_chkBox = QCheckBox()
        self.search_chkBox.setText('Only Selected Layers')
        self.search_chkBox.setChecked(True)
        self.empty_chkBox = QCheckBox()
        self.empty_chkBox.setText('Show empty layers')
        self.empty_chkBox.setChecked(False)
        
        self.search_line_edit = QgsFilterLineEdit()
        self.search_line_edit.setPlaceholderText('Buffer...')
        self.search_line_edit.setMaximumWidth(60)
        
        self.openCSVfileAction = QAction(
            QIcon(":/plugins/sw2LayerSearch/csvicon.png"),
            "Open CSV file SW2", self.tool_bar) # self.iface.mainWindow()
        self.openResetAction = QAction(
            QIcon(":/plugins/sw2LayerSearch/reload.png"),
            "Reset Search", self.tool_bar) # self.iface.mainWindow()
        # resetProjectSearch
        self.openCSVfileAction.setEnabled(False)
        self.existingCheckAction = QAction(
            QIcon(":/plugins/sw2LayerSearch/checker_select_32.png"),
            "Check Constraints For Existing Polygon", self.tool_bar) # self.iface.mainWindow()
        self.freehandCheckAction = QAction(
            QIcon(":/plugins/sw2LayerSearch/checker_freehand_32.png"),
            "Check Constraints For Free-hand Polygon", self.tool_bar) # self.iface.mainWindow()
        # connect the action to the run method
        self.existingCheckAction.triggered.connect(self.checkExistingGeometry)
        self.freehandCheckAction.triggered.connect(self.checkFreehandGeometry)
        self.openCSVfileAction.triggered.connect(self.openCSVfile)
        self.openResetAction.triggered.connect(self.freeHandTool.resetProjectSearch)

        # Add toolbar button and menu item
        
        self.tool_bar.addAction(self.existingCheckAction) # self.iface.addToolBarIcon
        self.tool_bar.addAction(self.freehandCheckAction)
        self.tool_bar.addAction(self.openCSVfileAction)
        
        self.tool_bar.addAction(self.openResetAction)
        
        self.tool_bar.addWidget(self.search_line_edit)
        self.tool_bar.addWidget(self.search_chkBox)
        self.search_chkBox.resize(self.search_chkBox.sizeHint())
        self.tool_bar.addWidget(self.empty_chkBox)
        
        self.iface.addPluginToMenu("&SW2 Layer Search", self.existingCheckAction)
        self.iface.addPluginToMenu("&SW2 Layer Search", self.freehandCheckAction)
        self.iface.addPluginToMenu("&SW2 Layer Search", self.openCSVfileAction)
        #QObject.connect(self.freeHandTool, SIGNAL("geometryReady(PyQt_PyObject)"), self.receiveFeature)
        self.freeHandTool.geometryReady.connect(self.receiveFeature)
    
    def openCSVfile(self):
        # Text csv file handling OS dependant, Win Server displays cmd window since 3.16
        if os.name == 'nt':
            os.startfile(self.freeHandTool.resFileName)
        else:
            os.system('gedit %s&' % self.freeHandTool.resFileName)
        
    def checkExistingGeometry(self):

        geom = None
        # use selected ploygon
        selCount = self.iface.activeLayer().selectedFeatureCount()
        if selCount == 0:# only a single feature is valid
            iface.messageBar().pushMessage("Select features first...", level=Qgis.Info, duration=5)
            validSelectiion = False
        elif selCount > 1:
            iface.messageBar().pushMessage("Selected features will be merged...", level=Qgis.Info, duration=5)
            for feat in iface.activeLayer().selectedFeatures():
                if geom == None:
                    geom = feat.geometry()
                else:
                    geom = geom.combine(feat.geometry())
            validSelection = True
        else:
            feat = iface.activeLayer().selectedFeatures()[0]
            geom = QgsGeometry(feat.geometry())
            validSelection = True
        
        if validSelection:
            buff = self.search_line_edit
            selLyrs = self.search_chkBox
            emptyLyrs = self.empty_chkBox
            openCSV = self.openCSVfileAction
            self.freeHandTool.handleFeature(geom, buff, selLyrs, emptyLyrs, openCSV)
        
    def checkFreehandGeometry(self):
        self.iface.mapCanvas().setMapTool(self.freeHandTool)
                
    def unload(self):
        # Remove the plugin menu item and icon
        self.iface.removePluginMenu("&SW2 Layer Search", self.existingCheckAction)
        self.iface.removePluginMenu("&SW2 Layer Search", self.freehandCheckAction)
        self.iface.removePluginMenu("&SW2 Layer Search", self.openCSVfileAction)
        
        self.iface.removeToolBarIcon(self.existingCheckAction)
        self.iface.removeToolBarIcon(self.freehandCheckAction)
        self.iface.removeToolBarIcon(self.openResetAction)
        #QObject.disconnect(self.freeHandTool, SIGNAL("geometryReady(PyQt_PyObject)"), self.receiveFeature)
        self.freeHandTool.geometryReady.connect(self.receiveFeature)
        #self.search_line_edit.textEdited.disconnect(self.on_search_text_changed)
        # Remove the new toolbar
        self.tool_bar.clear()  # Clear all actions
        self.iface.mainWindow().removeToolBar(self.tool_bar)
        
    def receiveFeature(self, geom):

        #crs = self.iface.mapCanvas().mapRenderer().destinationCrs()
        #epsg = int( crs.authid().split('EPSG:')[1] )
        self.iface.mapCanvas().unsetMapTool( self.freeHandTool )
        buff = self.search_line_edit
        selLyrs = self.search_chkBox
        emptyLyrs = self.empty_chkBox
        openCSV =  self.openCSVfileAction
        self.freeHandTool.handleFeature(geom, buff, selLyrs, emptyLyrs, openCSV)
